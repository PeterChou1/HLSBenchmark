// test_polyvec.c

#include "polyvec.h" // Include the header file that contains the function declarations

// Define a helper function to print the elements of a poly data structure
void print_poly(const poly *a) {
    printf("(");
    for (int i = 0; i < N - 1; i++) {
        printf("%d, ", a->coeff[i]);
    }
    printf("%d)\n", a->coeff[N - 1]);
}

int main() {

    // Create some sample test data
    poly a, b;
    uint16_t a_golden[N]= {5758, 65052, 3754, 63002, 5194, 63563, 7282, 31, 2483, 2197, 2725, 64875, 2707, 3846, 4817, 2194, 1971, 4132, 4251, 3560, 2319, 613, 1075, 3935, 3635, 65350, 4709, 2718, 4484, 531, 7476, 63793, 2874, 155, 304, 63649, 64826, 63919, 64376, 61037, 1479, 64841, 65071, 64221, 1679, 65407, 3431, 1923, 1603, 558, 681, 316, 517, 931, 63939, 1999, 2024, 1094, 2276, 64366, 2187, 64180, 2637, 61036, 5702, 198, 2986, 62454, 1482, 62656, 4486, 60168, 1057, 64427, 4453, 1019, 3729, 2206, 1225, 64440, 1376, 65087, 2664, 62821, 64167, 1974, 65141, 64886, 65067, 2217, 61775, 65441, 1905, 3365, 64513, 2145, 219, 581, 65207, 63585, 61270, 2835, 63892, 1091, 63261, 64357, 543, 65399, 61396, 3246, 64484, 570, 239, 64729, 63045, 64197, 126, 64844, 126, 818, 3232, 63282, 940, 742, 2617, 62837, 3979, 64983, 61484, 482, 61086, 868, 60827, 2149, 58615, 5225, 61874, 64513, 62270, 883, 64670, 1313, 64158, 2999, 62304, 64013, 61708, 64311, 63978, 64660, 370, 64812, 871, 1467, 64633, 1985, 64570, 658, 63222, 62862, 62708, 62871, 63456, 65327, 106, 65307, 1274, 1919, 1890, 64354, 64168, 64156, 1738, 461, 2772, 63477, 65302, 64296, 63258, 61454, 63835, 63942, 62073, 60912, 62862, 62731, 65402, 59779, 2007, 63626, 157, 61212, 2344, 65032, 634, 850, 64730, 2642, 672, 1604, 216, 3280, 63524, 4234, 1165, 1532, 3059, 4106, 62449, 63959, 64259, 533, 63213, 64065, 64543, 1183, 63863, 63875, 60915, 65153, 64391, 1048, 62311, 65032, 63084, 111, 63570, 1989, 64202, 62866, 12, 506, 63758, 64229, 62090, 1591, 63844, 2330, 63832, 65002, 62981, 70, 63209, 3194, 63135, 987, 61595, 3005, 58432, 62356, 61472, 65312, 64709, 2134, 61595, 64510};
    uint16_t b_golden[N]= {65086, 62209, 64084, 64797, 61475, 768, 62519, 63814, 2906, 731, 65234, 64619, 65225, 1133, 62951, 2849, 61528, 5778, 62668, 3100, 65031, 1574, 64409, 1376, 153, 889, 62897, 4271, 64449, 1759, 409, 2349, 1437, 979, 3481, 415, 65181, 64307, 2749, 1359, 2404, 64705, 1432, 63739, 2504, 64723, 3380, 1573, 61344, 708, 64212, 63668, 64130, 3777, 866, 639, 1012, 1526, 1138, 64524, 64965, 64801, 61861, 63581, 2851, 1796, 1493, 64688, 741, 2164, 2243, 5040, 64400, 63627, 562, 64831, 3529, 928, 2277, 63966, 688, 3326, 1332, 1900, 4309, 2590, 1467, 88, 4759, 4384, 3113, 2926, 5946, 3493, 4482, 1069, 1774, 3982, 1500, 4344, 1196, 1912, 64714, 2486, 3856, 64853, 1936, 1101, 4588, 1286, 6132, 1340, 63991, 63342, 419, 62596, 63, 1074, 63, 65496, 1616, 963, 470, 64511, 2973, 65215, 325, 2507, 63510, 65240, 1104, 62290, 64846, 1755, 63740, 65263, 1498, 2318, 1696, 1006, 65103, 135, 64847, 1609, 63920, 63519, 63622, 65415, 64757, 1581, 185, 481, 60978, 62282, 63420, 65054, 61724, 60685, 61050, 61447, 64122, 61909, 64496, 64305, 53, 59954, 637, 62924, 945, 63546, 2645, 63160, 869, 65274, 63593, 1768, 65419, 62127, 64397, 59399, 814, 62046, 3262, 62500, 64199, 60100, 65469, 63208, 61546, 59404, 63950, 59656, 63379, 1639, 317, 1499, 65133, 4116, 62543, 4294, 108, 2226, 64530, 2474, 64454, 1455, 62072, 4129, 62328, 2094, 59904, 1122, 62710, 3701, 60046, 4427, 828, 64439, 64890, 64947, 63299, 64387, 62259, 1371, 2103, 64514, 64553, 63028, 2662, 61752, 6, 64998, 2440, 63357, 1606, 63371, 64690, 1124, 64684, 65128, 62594, 65395, 62708, 64723, 464, 1265, 65230, 3837, 65313, 5472, 1297, 2506, 1251, 1450, 3023, 1264};
 
    for (int i = 0; i < N; i++)
        a.coeff[i] = i;
    
    for (int i = 0; i < N; i++) 
        b.coeff[i] = a.coeff[( (i % 2 == 0) ? i / 2 : N - 1 - i / 2 )];

    // Print the input
    printf("Input Polynomial 'a': ");
    print_poly(&a);

    printf("Input Polynomial 'b': ");
    print_poly(&b);

    // Perform NTT on the poly data structures
    polyvec v,x;
    v.vec[0] = a;
    v.vec[1] = b;

    // Perform the NTT on the vector of polynomials
    polyvec_ntt(&v,&x);

    // Print the results
    printf("Output Polynomial 'a' after NTT: ");
    print_poly(&x.vec[0]);

    printf("Output Polynomial 'b' after NTT: ");
    print_poly(&x.vec[1]);

    for (int i = 0; i < N; i++) {
        if(a_golden[i] != x.vec[0].coeff[i]) {
            printf("mismatch on a[%d]/v.vec[0].coeff[%d], expected %d got %d\n",i,i,a_golden[i], v.vec[0].coeff[i]);
            return 1;
        }
        if(b_golden[i] != x.vec[1].coeff[i]) {
            printf("mismatch on b[%d]/v.vec[1].coeff[%d], expected %d got %d\n",i,i,b_golden[i], v.vec[1].coeff[i]);
            return 2;
        }
    }
    printf("Self-checking tests complete: OKAY\n");
    return 0;
}

